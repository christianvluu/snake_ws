// Generated by gencpp from file snake_control/GetJointStatesRequest.msg
// DO NOT EDIT!


#ifndef SNAKE_CONTROL_MESSAGE_GETJOINTSTATESREQUEST_H
#define SNAKE_CONTROL_MESSAGE_GETJOINTSTATESREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace snake_control
{
template <class ContainerAllocator>
struct GetJointStatesRequest_
{
  typedef GetJointStatesRequest_<ContainerAllocator> Type;

  GetJointStatesRequest_()
    {
    }
  GetJointStatesRequest_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }







  typedef boost::shared_ptr< ::snake_control::GetJointStatesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snake_control::GetJointStatesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetJointStatesRequest_

typedef ::snake_control::GetJointStatesRequest_<std::allocator<void> > GetJointStatesRequest;

typedef boost::shared_ptr< ::snake_control::GetJointStatesRequest > GetJointStatesRequestPtr;
typedef boost::shared_ptr< ::snake_control::GetJointStatesRequest const> GetJointStatesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::snake_control::GetJointStatesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::snake_control::GetJointStatesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace snake_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::snake_control::GetJointStatesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snake_control::GetJointStatesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snake_control::GetJointStatesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snake_control::GetJointStatesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snake_control::GetJointStatesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snake_control::GetJointStatesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::snake_control::GetJointStatesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const ::snake_control::GetJointStatesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::snake_control::GetJointStatesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "snake_control/GetJointStatesRequest";
  }

  static const char* value(const ::snake_control::GetJointStatesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::snake_control::GetJointStatesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is a service that returns the state of a set of torque controlled joints. \n"
"#\n"
"# The state of each joint (revolute or prismatic) is defined by:\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s) and \n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"# The header specifies the time at which the joint states were recorded. All the joint states\n"
"# in one message have to be recorded at the same time.\n"
"#\n"
"# This message consists of a multiple arrays, one for each part of the joint state. \n"
"# The goal is to make each of the fields optional. When e.g. your joints have no\n"
"# effort associated with them, you can leave the effort array empty. \n"
"#\n"
"# All arrays in this message should have the same size, or be empty.\n"
"# This is the only way to uniquely associate the joint name with the correct\n"
"# states.\n"
"\n"
"\n"
;
  }

  static const char* value(const ::snake_control::GetJointStatesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::snake_control::GetJointStatesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetJointStatesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::snake_control::GetJointStatesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::snake_control::GetJointStatesRequest_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // SNAKE_CONTROL_MESSAGE_GETJOINTSTATESREQUEST_H
